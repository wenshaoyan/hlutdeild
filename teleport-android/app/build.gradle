apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "top.potens.teleport"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'
    // https://mvnrepository.com/artifact/org.zeromq/jeromq
    //    implementation 'org.zeromq:jeromq:0.4.3'
    // https://mvnrepository.com/artifact/io.netty/netty-all
    //    implementation 'io.netty:netty-all:4.1.24.Final'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android:1.1.1-12'
}
// 获取远程图片 返回本地地址
function getHttpImage(url, filepath) {
    const startTime = new Date().getTime();
    let httpObject = http;
    try {
        const url2 = new URL(url);
        if (url2.protocol === 'https:') {
            httpObject = https;
        }
    } catch (e) {
        return Promise.reject('getHttpImage: url error,' + url);
    }
    return new Promise((resolve, reject) => {
        httpObject.get(url, function(res) {
            let imgData = "";

            res.setEncoding("binary"); //一定要设置response的编码为binary否则会下载下来的图片打不开

            res.on("data", function(chunk) {
                imgData += chunk;
            });

            res.on("end", function() {
                fs.writeFile(filepath, imgData, "binary", function(err) {
                    if (err) {
                        console.error(`WeekendPoster getHttpImage: 获取远程图片失败,time=${new Date().getTime() - startTime},url=${url}`);
                        reject(err);
                    } else {
                        console.log(`WeekendPoster getHttpImage: 获取远程图片成功,time=${new Date().getTime() - startTime},url=${url}`);
                        resolve(filepath);
                    }
                });
            });
        });
    });

}